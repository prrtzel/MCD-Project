00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/27/2023 9:36:22 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : ASCII hex to binary
00000000                             3  * Written by : George Yacoubian
00000000                             4  * Date       : 11/20/23
00000000                             5  * Description: converts ASCII hex to binary 
00000000                             6  *-----------------------------------------------------------
00000000                             7  * MACROS
00000000                             8  
00000000                             9  
00000000                            10  OUTSTR   MACRO
00000000                            11              MOVE.L  #14,D0
00000000                            12              LEA     \1,A1
00000000                            13              TRAP    #15
00000000                            14              ENDM       
00000000                            15  
00000000                            16  *-------------------------------------------------------------
00000000                            17  
00001000                            18      ORG    $1000
00001000                            19   
00001000                            20  START:                  ; first instruction of program
00001000                            21  
00001000  =00000001                 22  SIM EQU 1       ;0 = hardware state, 1 = simulation state
00001000                            23  
00001000                            24      IF.B    SIM <NE> #00 THEN.L ;when simulating, turn off keyboard echo
0000100A  123C 0000                 25      MOVE.B  #$00,D1
0000100E  103C 000C                 26      MOVE.B  #12,D0
00001012  4E4F                      27      TRAP    #15
00001014                            28      ENDI
00001014                            29      
00001014                            30  *-------------------------------------------------------------
00001014                            31  * MAIN
00001014                            32       
00001014  4EB9 00001186             33       JSR HEX2ASCIITEST
0000101A                            34       
0000101A                            35  
0000101A  FFFF FFFF                 36      SIMHALT                 ; halt simulator
0000101E                            37      
0000101E                            38  *------------------------------------------------------------- 
0000101E                            39  * VARIABLES
0000101E                            40     
0000101E                            41      
0000101E= 45 52 52 4F 52 0D ...     42  ERRTEXT     DC.B 'ERROR',$D,$A,0
00001026= 53 55 43 43 45 53 ...     43  SUCCESSTXT  DC.B 'SUCCESS',$D,$A,0    
00001030                            44  
00001030                            45  *-------------------------------------------------------------
00001030                            46  
00001030                            47  * SUBROUTINES
00001030                            48  
00001030                            49  *-------------------------------------------------------------
00001030                            50  * TEST SUBROUTINES
00001030                            51  * ASCII DECIMAL TO BINARY
00001030                            52  
00001030                            53  D2BTEST
00001030  103C 0000                 54      MOVE.B  #$00, D0
00001034  4EB9 0000129C             55      JSR     ASCIIDEC2BIN
0000103A  4EB9 0000109A             56      JSR     VERF1
00001040                            57      
00001040  103C 002F                 58      MOVE.B  #$2F, D0
00001044  4EB9 0000129C             59      JSR     ASCIIDEC2BIN
0000104A  4EB9 0000109A             60      JSR     VERF1
00001050                            61      
00001050  103C 0030                 62      MOVE.B  #$30, D0
00001054  4EB9 0000129C             63      JSR     ASCIIDEC2BIN
0000105A  4EB9 0000109A             64      JSR     VERF1
00001060                            65      
00001060  103C 0039                 66      MOVE.B  #$39, D0
00001064  4EB9 0000129C             67      JSR     ASCIIDEC2BIN
0000106A  4EB9 0000109A             68      JSR     VERF1
00001070                            69      
00001070  103C 003A                 70      MOVE.B  #$3A, D0
00001074  4EB9 0000129C             71      JSR     ASCIIDEC2BIN
0000107A  4EB9 0000109A             72      JSR     VERF1
00001080                            73      
00001080  103C 00FF                 74      MOVE.B  #$FF, D0
00001084  4EB9 0000129C             75      JSR     ASCIIDEC2BIN
0000108A  4EB9 0000109A             76      JSR     VERF1
00001090                            77      
00001090  7001                      78      MOVE.L  #$01, D0
00001092  4EB9 0000109A             79      JSR VERF1
00001098                            80      
00001098                            81  END1    
00001098  4E75                      82      RTS 
0000109A                            83      
0000109A                            84  VERF1   
0000109A                            85      IF.B D1 <GE> #$30 AND.L D1 <LE> #$39 THEN.L
000010AC                            86  
000010AC                            87      ELSE
000010B0  7000                      88          MOVE.L  #$00, D0
000010B2  4EF8 1098                 89          JMP END1
000010B6                            90      ENDI 
000010B6                            91  
000010B6  4E75                      92      RTS
000010B8                            93  
000010B8                            94  
000010B8                            95  *-------------------------------------------------------------
000010B8                            96  * TEST SUBROUTINES
000010B8                            97  * ASCII HEX TO BINARY
000010B8                            98  
000010B8                            99  H2BTEST
000010B8  103C 0040                100      MOVE.B #$40, D0
000010BC  4EB9 000012A8            101      JSR ASCIIHEX2BIN
000010C2  4EB9 0000113A            102      JSR VERF2
000010C8  103C 0041                103      MOVE.B #$41, D0
000010CC  4EB9 000012A8            104      JSR ASCIIHEX2BIN
000010D2  4EB9 0000113A            105      JSR VERF2
000010D8  103C 0046                106      MOVE.B #$46, D0
000010DC  4EB9 000012A8            107      JSR ASCIIHEX2BIN
000010E2  4EB9 0000113A            108      JSR VERF2
000010E8  103C 0047                109      MOVE.B #$47, D0
000010EC  4EB9 000012A8            110      JSR ASCIIHEX2BIN
000010F2  4EB9 0000113A            111      JSR VERF2
000010F8  103C 0060                112      MOVE.B #$60, D0
000010FC  4EB9 000012A8            113      JSR ASCIIHEX2BIN
00001102  4EB9 0000113A            114      JSR VERF2
00001108  103C 0061                115      MOVE.B #$61, D0
0000110C  4EB9 000012A8            116      JSR ASCIIHEX2BIN
00001112  4EB9 0000113A            117      JSR VERF2
00001118  103C 0066                118      MOVE.B #$66, D0
0000111C  4EB9 000012A8            119      JSR ASCIIHEX2BIN
00001122  4EB9 0000113A            120      JSR VERF2
00001128  103C 0067                121      MOVE.B #$67, D0
0000112C  4EB9 000012A8            122      JSR ASCIIHEX2BIN
00001132  4EB9 0000113A            123      JSR VERF2
00001138                           124      
00001138  4E75                     125  END2    RTS 
0000113A                           126      
0000113A                           127  VERF2   
0000113A                           128      IF.B D1 <GE> #$30 AND.L D1 <LE> #$39 THEN.L
0000114C                           129      ELSE
00001150                           130          IF.B D1 <GE> #$41 AND.L D1 <LE> #$46 THEN.L
00001162                           131          ELSE
00001166                           132              IF.B D1 <GE> #$61 AND.L D1 <LE> #$66 THEN.L
00001178                           133              ELSE
0000117C  7000                     134                  MOVE.L  #$00, D0
0000117E  4EF8 1138                135                  JMP END2
00001182                           136              ENDI
00001182                           137          ENDI
00001182                           138      ENDI 
00001182                           139  
00001182  7001                     140      MOVE.L  #$01, D0
00001184                           141      
00001184  4E75                     142      RTS
00001186                           143  
00001186                           144  *-------------------------------------------------------------
00001186                           145  * TEST SUBROUTINES
00001186                           146  * ASCII STRING TO ASCII HEX
00001186                           147  
00001186                           148  HEX2ASCIITEST
00001186                           149  
00001186  2F01                     150      MOVE.L  D1, -(SP)
00001188  2F02                     151      MOVE.L  D2, -(SP)
0000118A  2F04                     152      MOVE.L  D4, -(SP)
0000118C                           153  
0000118C  7010                     154      MOVE.L #$0010, D0
0000118E  4EB9 0000120C            155      JSR HEX2ASCII
00001194  243C 30303030            156      MOVE.L #$30303030, D2
0000119A  4EB9 000011FC            157      JSR VERF3
000011A0                           158      
000011A0  203C 00001234            159      MOVE.L #$1234, D0
000011A6  4EB9 0000120C            160      JSR HEX2ASCII
000011AC  243C 31323334            161      MOVE.L #$31323334, D2
000011B2  4EB9 000011FC            162      JSR VERF3
000011B8                           163      
000011B8  203C 0000ABCD            164      MOVE.L #$ABCD, D0
000011BE  4EB9 0000120C            165      JSR HEX2ASCII
000011C4  243C 41424344            166      MOVE.L #$41424344, D2
000011CA  4EB9 000011FC            167      JSR VERF3
000011D0                           168      
000011D0  203C 0000FFFF            169      MOVE.L #$FFFF, D0
000011D6  4EB9 0000120C            170      JSR HEX2ASCII
000011DC  243C 46464646            171      MOVE.L #$46464646, D2
000011E2  4EB9 000011FC            172      JSR VERF3
000011E8                           173      
000011E8                           174      IF.L D4 <EQ> #$01 THEN.L
000011F2  7000                     175          MOVE.L #$00, D0
000011F4                           176      ENDI
000011F4                           177      
000011F4  281F                     178      MOVE.L  (SP)+, D4
000011F6  241F                     179      MOVE.L  (SP)+, D2
000011F8  221F                     180      MOVE.L  (SP)+, D1
000011FA                           181      
000011FA  4E75                     182      RTS
000011FC                           183      
000011FC                           184      
000011FC                           185  VERF3   
000011FC                           186      IF.L D1 <EQ> D2 THEN.L
00001202  7001                     187          MOVE.L  #$01, D0
00001204                           188      ELSE
00001208  7801                     189          MOVE.L  #$01, D4
0000120A                           190      ENDI 
0000120A                           191      
0000120A  4E75                     192      RTS
0000120C                           193  
0000120C                           194  
0000120C                           195  *-------------------------------------------------------------
0000120C                           196  * HEX 2 STRING
0000120C                           197  * MOVES IN CHAR FROM D0
0000120C                           198  * MASKS AND SHIFTS IT, THEN DEPENDING ON CHAR
0000120C                           199  * CONVERTS IT TO ASCII CODE IN HEX
0000120C                           200  * THEN MOVES IT INTO D3 AND SHIFTS
0000120C                           201  
0000120C                           202  HEX2ASCII
0000120C  2F00                     203      MOVE.L  D0, -(SP)
0000120E  2F02                     204      MOVE.L  D2, -(SP)
00001210  2F03                     205      MOVE.L  D3, -(SP)
00001212                           206      
00001212                           207  
00001212  2200                     208      MOVE.L  D0, D1      ; MOVE INTO BUFFER
00001214  C27C F000                209      AND     #$F000, D1  ; MASK DESIRED CHAR
00001218  163C 000C                210      MOVE.B  #$0C, D3    ; SHIFT TO LSB 
0000121C  E669                     211      LSR     D3, D1      ;
0000121E  4EB9 00001268            212      JSR     CONVERT     ; CONVERT STRING TO ASCII HEX & STORE IN D2
00001224  163C 0008                213      MOVE.B  #$08, D3    ; SHIFT D2
00001228  E7AA                     214      LSL.L   D3, D2      ;
0000122A                           215      
0000122A  2200                     216      MOVE.L  D0, D1
0000122C  C27C 0F00                217      AND     #$0F00, D1
00001230  E049                     218      LSR     #8, D1
00001232  4EB9 00001268            219      JSR     CONVERT
00001238  163C 0008                220      MOVE.B  #$08, D3
0000123C  E7AA                     221      LSL.L   D3, D2
0000123E                           222      
0000123E  2200                     223      MOVE.L  D0, D1
00001240  C27C 00F0                224      AND     #$00F0, D1
00001244  E849                     225      LSR     #4, D1
00001246  4EB9 00001268            226      JSR     CONVERT
0000124C  163C 0008                227      MOVE.B  #$08, D3
00001250  E7AA                     228      LSL.L   D3, D2
00001252                           229      
00001252  2200                     230      MOVE.L  D0, D1
00001254  C27C 000F                231      AND     #$000F, D1
00001258  4EB9 00001268            232      JSR     CONVERT
0000125E                           233      
0000125E  2202                     234      MOVE.L D2, D1
00001260                           235      
00001260  261F                     236      MOVE.L  (SP)+, D3
00001262  241F                     237      MOVE.L  (SP)+, D2
00001264  201F                     238      MOVE.L  (SP)+, D0
00001266                           239      
00001266  4E75                     240      RTS
00001268                           241      
00001268                           242  CONVERT
00001268                           243      IF.B D1 <GE> #$00 AND.L D1 <LE> #$09 THEN.L
0000127A  827C 0030                244          OR  #$30, D1
0000127E                           245      ENDI
0000127E                           246    
0000127E                           247      IF.B D1 <GE> #$0A AND.L D1 <LE> #$0F THEN.L
00001290  0441 0009                248          SUB #$09, D1 ; CONVERT LETTER TO DIGIT BY SUBTRACTING 9
00001294  827C 0040                249          OR  #$40, D1 
00001298                           250      ENDI
00001298                           251      
00001298  1401                     252      MOVE.B D1, D2
0000129A                           253      
0000129A  4E75                     254      RTS
0000129C                           255  
0000129C                           256  *-------------------------------------------------------------
0000129C                           257  * CONVERT ASCII DECIMAL DIGIT TO HEX VALUE 
0000129C                           258  * TAKES VALUE FROM D0 AND PUTS IT IN
0000129C                           259  * HEX FORM IN D1
0000129C                           260  * EX: '9' --> 9(16)
0000129C                           261  
0000129C                           262  ASCIIDEC2BIN
0000129C                           263  
0000129C  2F00                     264      MOVE.L  D0, -(SP)
0000129E  1200                     265      MOVE.B  D0, D1  
000012A0  C27C 000F                266      AND #$0F, D1    ;MASK THE LSB TO EXTRACT THE DIGIT         
000012A4  201F                     267      MOVE.L  (SP)+, D0  
000012A6  4E75                     268      RTS
000012A8                           269      
000012A8                           270  *-------------------------------------------------------------
000012A8                           271  * CONVERT ASCII HEX DIGIT TO HEX VALUE 
000012A8                           272  * TAKES VALUE FROM D0 AND PUTS IT IN
000012A8                           273  * HEX FORM IN D1
000012A8                           274  * EX: 'A' --> A(16)
000012A8                           275  
000012A8                           276  ASCIIHEX2BIN
000012A8                           277  
000012A8  2F00                     278      MOVE.L  D0, -(SP)
000012AA  1200                     279      MOVE.B  D0, D1   
000012AC                           280      IF.B D0 <GT> #$39 THEN.L
000012B4  5F41                     281          SUBI #$7, D1        ;SUBTRACTING 7 TO CONCANTENATE ALL
000012B6                           282                              ;ASCII VALUES FROM 30-3F
000012B6                           283      ENDI    
000012B6  C27C 000F                284      AND #$0F, D1    ;MASK THE LSB TO EXTRACT THE DIGIT  
000012BA  201F                     285      MOVE.L  (SP)+, D0
000012BC  4E75                     286      RTS
000012BE                           287  
000012BE                           288  *-------------------------------------------------------------
000012BE                           289  * GCHAR gets an input character and stores is in D0
000012BE                           290  
000012BE                           291  GCHAR   IF.B    SIM <EQ> #00 THEN.L
000012C8                           292          
000012C8                           293      *INSERT YOUR HARDWARE GETCHAR CODE
000012C8                           294  
000012C8                           295      ELSE
000012CC                           296      
000012CC  2F01                     297      MOVE.L  D1, -(SP)   ;
000012CE  7005                     298      MOVE.L  #05, D0     ;
000012D0  4E4F                     299      TRAP    #15         ;
000012D2  1001                     300      MOVE.B  D1, D0      ;
000012D4  221F                     301      MOVE.L  (SP)+, D1   ;
000012D6                           302      
000012D6                           303      ENDI
000012D6                           304  
000012D6                           305  *-------------------------------------------------------------
000012D6                           306  
000012D6                           307  * PCHAR outputs the character on D0 
000012D6                           308  PCHAR   IF.B    SIM <EQ> #00 THEN.L
000012E0                           309      
000012E0                           310      *INSERT YOUR HARDWARE PUTCHAR CODE
000012E0                           311      
000012E0                           312      ELSE
000012E4                           313      
000012E4  2F00                     314      MOVE.L  D0, -(SP)   ; Task
000012E6  2F01                     315      MOVE.L  D1, -(SP)   ; Char to display
000012E8  1200                     316      MOVE.B  D0, D1      ;
000012EA  7006                     317      MOVE.L  #06, D0     ;
000012EC  4E4F                     318      TRAP    #15     ;
000012EE  221F                     319      MOVE.L  (SP)+, D1   ;
000012F0  201F                     320      MOVE.L  (SP)+, D0   ;
000012F2                           321      
000012F2                           322      ENDI
000012F2                           323      
000012F2  4E75                     324      RTS
000012F4                           325  
000012F4                           326  
000012F4                           327      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCIIDEC2BIN        129C
ASCIIHEX2BIN        12A8
CONVERT             1268
D2BTEST             1030
END1                1098
END2                1138
ERRTEXT             101E
GCHAR               12BE
H2BTEST             10B8
HEX2ASCII           120C
HEX2ASCIITEST       1186
OUTSTR              0
PCHAR               12D6
SIM                 1
START               1000
SUCCESSTXT          1026
VERF1               109A
VERF2               113A
VERF3               11FC
_00000000           1014
_00000001           10B0
_00000002           10B6
_00000003           1150
_00000004           1182
_00000005           1166
_00000006           1182
_00000007           117C
_00000008           1182
_00000009           11F4
_0000000A           1208
_0000000B           120A
_0000000C           127E
_0000000D           1298
_0000000E           12B6
_0000000F           12CC
_00000010           12D6
_00000011           12E4
_00000012           12F2
