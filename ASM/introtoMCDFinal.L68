00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/21/2023 4:06:59 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : ASCII hex to binary
00000000                             3  * Written by : George Yacoubian
00000000                             4  * Date       : 11/20/23
00000000                             5  * Description: converts ASCII hex to binary 
00000000                             6  *-----------------------------------------------------------
00000000                             7  * MACROS
00000000                             8  
00000000                             9  
00000000                            10  OUTSTR   MACRO
00000000                            11              MOVE.L  #14,D0
00000000                            12              LEA     \1,A1
00000000                            13              TRAP    #15
00000000                            14              ENDM       
00000000                            15  
00000000                            16  *-------------------------------------------------------------
00000000                            17  
00001000                            18      ORG    $1000
00001000                            19   
00001000                            20  START:                  ; first instruction of program
00001000                            21  
00001000  =00000001                 22  SIM EQU 1       ;0 = hardware state, 1 = simulation state
00001000                            23  
00001000                            24      IF.B    SIM <NE> #00 THEN.L ;when simulating, turn off keyboard echo
0000100A  123C 0000                 25      MOVE.B  #$00,D1
0000100E  103C 000C                 26      MOVE.B  #12,D0
00001012  4E4F                      27      TRAP    #15
00001014                            28      ENDI
00001014                            29      
00001014                            30  *-------------------------------------------------------------
00001014                            31  * MAIN
00001014                            32       
00001014                            33       
00001014  303C ABCD                 34       MOVE.W #$ABCD, D0
00001018  4EB9 00001034             35       JSR HEX2ASCII
0000101E                            36       
0000101E                            37  
0000101E  FFFF FFFF                 38      SIMHALT                 ; halt simulator
00001022                            39      
00001022                            40  *------------------------------------------------------------- 
00001022                            41  * VARIABLES
00001022                            42     
00001022                            43      
00001022= 45 52 52 4F 52 0D ...     44  ERRTEXT     DC.B 'ERROR',$D,$A,0
0000102A= 53 55 43 43 45 53 ...     45  SUCCESSTXT  DC.B 'SUCCESS',$D,$A,0    
00001034                            46  
00001034                            47  *-------------------------------------------------------------
00001034                            48  
00001034                            49  * SUBROUTINES
00001034                            50  
00001034                            51  *-------------------------------------------------------------
00001034                            52  * HEX 2 STRING
00001034                            53  * MOVES IN CHAR FROM D0
00001034                            54  * MASKS AND SHIFTS IT, THEN DEPENDING ON CHAR
00001034                            55  * CONVERTS IT TO ASCII CODE IN HEX
00001034                            56  * THEN MOVES IT INTO D3 AND SHIFTS
00001034                            57  
00001034                            58  HEX2ASCII
00001034                            59  
00001034  3400                      60      MOVE.W  D0, D2      ; MOVE INTO BUFFER
00001036  C47C F000                 61      AND     #$F000, D2  ; MASK DESIRED CHAR
0000103A  183C 000C                 62      MOVE.B  #$0C, D4    ; SHIFT TO LSB 
0000103E  E86A                      63      LSR     D4, D2      ;
00001040  4EB9 00001084             64      JSR     CONVERT     ; CONVERT STRING TO ASCII HEX & STORE IN D3
00001046  183C 0008                 65      MOVE.B  #$08, D4    ; SHIFT D3
0000104A  E9AB                      66      LSL.L   D4, D3      ;
0000104C                            67      
0000104C  3400                      68      MOVE.W  D0, D2
0000104E  C47C 0F00                 69      AND     #$0F00, D2
00001052  E04A                      70      LSR     #8, D2
00001054  4EB9 00001084             71      JSR     CONVERT
0000105A  183C 0008                 72      MOVE.B  #$08, D4
0000105E  E9AB                      73      LSL.L   D4, D3
00001060                            74      
00001060  3400                      75      MOVE.W  D0, D2
00001062  C47C 00F0                 76      AND     #$00F0, D2
00001066  E84A                      77      LSR     #4, D2
00001068  4EB9 00001084             78      JSR     CONVERT
0000106E  183C 0008                 79      MOVE.B  #$08, D4
00001072  E9AB                      80      LSL.L   D4, D3
00001074                            81      
00001074  3400                      82      MOVE.W  D0, D2
00001076  C47C 000F                 83      AND     #$000F, D2
0000107A  4EB9 00001084             84      JSR     CONVERT
00001080                            85      
00001080                            86  
00001080  7001                      87      MOVE.L  #$01, D0 ; INDICATE SUCCESS
00001082                            88      
00001082  4E75                      89      RTS
00001084                            90      
00001084                            91  CONVERT
00001084                            92      IF.B D2 <GE> #$01 AND.L D2 <LE> #$09 THEN.L
00001096  847C 0030                 93          OR #$30, D2
0000109A                            94      ELSE  
0000109E                            95          IF.B D2 <GE> #$0A AND.L D2 <LE> #$0F THEN.L
000010B0  0442 0009                 96              SUB #$09, D2 ; CONVERT LETTER TO DIGIT BY SUBTRACTING 9
000010B4  847C 0040                 97              OR #$40, D2 
000010B8                            98          ELSE 
000010BC  7000                      99              MOVE.L  #$00, D0    ;INDICATE ERROR
000010BE                           100          ENDI
000010BE                           101      ENDI
000010BE                           102      
000010BE  1602                     103      MOVE.B D2, D3
000010C0  4E75                     104      RTS
000010C2                           105  
000010C2                           106  *-------------------------------------------------------------
000010C2                           107  * CONVERT ASCII DECIMAL DIGIT TO HEX VALUE 
000010C2                           108  * TAKES VALUE FROM D0 AND PUTS IT IN
000010C2                           109  * HEX FORM IN D2
000010C2                           110  * EX: '9' --> 9(16)
000010C2                           111  
000010C2                           112  ASCIIDEC2BIN
000010C2                           113  
000010C2  1400                     114      MOVE.B  D0, D2
000010C4                           115       
000010C4                           116      IF.B D0 <GE> #$30 AND.L D0 <LE> #$39 THEN.L
000010D6  4EF9 00001132            117          JMP EXTRACTDIGIT
000010DC  7001                     118          MOVE.L #$01, D0 ; INDICATE SUCCESS    
000010DE                           119      ELSE      
000010E2  7000                     120          MOVE.L  #$00, D0    ;INDICATE ERROR      
000010E4                           121      ENDI
000010E4                           122      
000010E4  4E75                     123      RTS
000010E6                           124      
000010E6                           125  *-------------------------------------------------------------
000010E6                           126  * CONVERT ASCII HEX DIGIT TO HEX VALUE 
000010E6                           127  * TAKES VALUE FROM D0 AND PUTS IT IN
000010E6                           128  * HEX FORM IN D2
000010E6                           129  * EX: 'A' --> A(16)
000010E6                           130  
000010E6                           131  ASCIIHEX2BIN
000010E6                           132  
000010E6  1400                     133      MOVE.B  D0, D2
000010E8                           134      
000010E8                           135      IF.B D0 <GT> #$39 THEN.L
000010F0  5F42                     136          SUBI #$7, D2        ;SUBTRACTING 7 TO CONCANTENATE ALL
000010F2                           137                              ;ASCII VALUES FROM 30-3F
000010F2                           138      ENDI 
000010F2                           139      
000010F2                           140      IF.B D2 <GE> #$30 AND.L D2 <LE> #$3F THEN.L
00001104  4EF9 00001132            141          JMP EXTRACTDIGIT
0000110A  7001                     142          MOVE.L  #$01, D0        ;INDICATE SUCCESS
0000110C                           143      ELSE
00001110                           144          IF.B D2 <GE> #$5A AND.L D2 <LE> #$5F THEN.L   
00001122  4EF9 00001132            145              JMP EXTRACTDIGIT
00001128  7001                     146              MOVE.L  #$01, D0    ;INDICATE SUCCESS     
0000112A                           147          ELSE        
0000112E  7000                     148              MOVE.L  #$00, D0    ;INDICATE ERROR
00001130                           149          ENDI
00001130                           150      ENDI
00001130                           151      
00001130  4E75                     152      RTS
00001132                           153      
00001132                           154  EXTRACTDIGIT       
00001132  C47C 000F                155          AND     #$0F, D2    ;MASK THE LSB TO EXTRACT THE DIGIT
00001136  4E75                     156          RTS
00001138                           157  
00001138                           158  
00001138                           159  *-------------------------------------------------------------
00001138                           160  * GCHAR gets an input character and stores is in D0
00001138                           161  
00001138                           162  GCHAR   IF.B    SIM <EQ> #00 THEN.L
00001142                           163          
00001142                           164      *INSERT YOUR HARDWARE GETCHAR CODE
00001142                           165  
00001142                           166      ELSE
00001146                           167      
00001146  2F01                     168      MOVE.L  D1, -(SP)   ;
00001148  7005                     169      MOVE.L  #05, D0     ;
0000114A  4E4F                     170      TRAP    #15         ;
0000114C  1001                     171      MOVE.B  D1, D0      ;
0000114E  221F                     172      MOVE.L  (SP)+, D1   ;
00001150                           173      
00001150                           174      ENDI
00001150                           175  
00001150                           176  *-------------------------------------------------------------
00001150                           177  
00001150                           178  * PCHAR outputs the character on D0 
00001150                           179  PCHAR   IF.B    SIM <EQ> #00 THEN.L
0000115A                           180      
0000115A                           181      *INSERT YOUR HARDWARE PUTCHAR CODE
0000115A                           182      
0000115A                           183      ELSE
0000115E                           184      
0000115E  2F00                     185      MOVE.L  D0, -(SP)   ; Task
00001160  2F01                     186      MOVE.L  D1, -(SP)   ; Char to display
00001162  1200                     187      MOVE.B  D0, D1      ;
00001164  7006                     188      MOVE.L  #06, D0     ;
00001166  4E4F                     189      TRAP    #15     ;
00001168  221F                     190      MOVE.L  (SP)+, D1   ;
0000116A  201F                     191      MOVE.L  (SP)+, D0   ;
0000116C                           192      
0000116C                           193      ENDI
0000116C                           194      
0000116C  4E75                     195      RTS
0000116E                           196  
0000116E                           197  
0000116E                           198      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCIIDEC2BIN        10C2
ASCIIHEX2BIN        10E6
CONVERT             1084
ERRTEXT             1022
EXTRACTDIGIT        1132
GCHAR               1138
HEX2ASCII           1034
OUTSTR              0
PCHAR               1150
SIM                 1
START               1000
SUCCESSTXT          102A
_00000000           1014
_00000001           109E
_00000002           10BE
_00000003           10BC
_00000004           10BE
_00000005           10E2
_00000006           10E4
_00000007           10F2
_00000008           1110
_00000009           1130
_0000000A           112E
_0000000B           1130
_0000000C           1146
_0000000D           1150
_0000000E           115E
_0000000F           116C
