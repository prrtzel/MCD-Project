00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/4/2023 3:11:14 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : ASCII hex to binary
00000000                             3  * Written by : George Yacoubian
00000000                             4  * Date       : 11/20/23
00000000                             5  * Description: converts ASCII hex to binary 
00000000                             6  *-----------------------------------------------------------
00000000                             7  * MACROS
00000000                             8  
00000000                             9  
00000000                            10  OUTSTR   MACRO
00000000                            11              MOVE.L  #14,D0
00000000                            12              LEA     \1,A1
00000000                            13              TRAP    #15
00000000                            14              ENDM       
00000000                            15  
00000000                            16  *-------------------------------------------------------------
00000000                            17  
00001000                            18      ORG    $1000
00001000                            19   
00001000                            20  START:                  ; first instruction of program
00001000                            21  
00001000  =00000001                 22  SIM EQU 1       ;0 = hardware state, 1 = simulation state
00001000                            23  
00001000                            24      IF.B    SIM <NE> #00 THEN.L ;when simulating, turn off keyboard echo
0000100A  123C 0000                 25      MOVE.B  #$00,D1
0000100E  103C 000C                 26      MOVE.B  #12,D0
00001012  4E4F                      27      TRAP    #15
00001014                            28      ENDI
00001014                            29      
00001014                            30  *-------------------------------------------------------------
00001014                            31  * MAIN
00001014                            32  
00001014                            33  *    JSR D2BTEST
00001014                            34  *    IF D0 <EQ> #$00 THEN.L
00001014                            35  *        OUTSTR ERRTEXT
00001014                            36  *    ELSE
00001014                            37  *        OUTSTR SUCCESSTXT
00001014                            38  *    ENDI
00001014                            39      
00001014  7064                      40      MOVE.L #$64, D0
00001016  4EB9 0000127A             41      JSR ASCIIHEX2BIN
0000101C                            42      
0000101C  FFFF FFFF                 43      SIMHALT                 ; halt simulator
00001020                            44      
00001020                            45  *------------------------------------------------------------- 
00001020                            46  * VARIABLES
00001020                            47     
00001020                            48      
00001020= 45 52 52 4F 52 0D ...     49  ERRTEXT     DC.B 'ERROR',$D,$A,0
00001028= 53 55 43 43 45 53 ...     50  SUCCESSTXT  DC.B 'SUCCESS',$D,$A,0    
00001032                            51  
00001032                            52  *-------------------------------------------------------------
00001032                            53  
00001032                            54  * SUBROUTINES
00001032                            55  
00001032                            56  *-------------------------------------------------------------
00001032                            57  * TEST SUBROUTINES
00001032                            58  * ASCII DECIMAL TO BINARY
00001032                            59  
00001032                            60  D2BTEST
00001032  103C 0032                 61      MOVE.B  #$32, D0
00001036  4EB9 0000126E             62      JSR     ASCIIDEC2BIN
0000103C  4EB9 0000109C             63      JSR     VERF1
00001042                            64      
00001042  103C 0004                 65      MOVE.B  #$04, D0
00001046  4EB9 0000126E             66      JSR     ASCIIDEC2BIN
0000104C  4EB9 0000109C             67      JSR     VERF1
00001052                            68      
00001052  103C 0030                 69      MOVE.B  #$30, D0
00001056  4EB9 0000126E             70      JSR     ASCIIDEC2BIN
0000105C  4EB9 0000109C             71      JSR     VERF1
00001062                            72      
00001062  103C 0039                 73      MOVE.B  #$39, D0
00001066  4EB9 0000126E             74      JSR     ASCIIDEC2BIN
0000106C  4EB9 0000109C             75      JSR     VERF1
00001072                            76      
00001072  103C 0033                 77      MOVE.B  #$33, D0
00001076  4EB9 0000126E             78      JSR     ASCIIDEC2BIN
0000107C  4EB9 0000109C             79      JSR     VERF1
00001082                            80      
00001082  103C 0034                 81      MOVE.B  #$34, D0
00001086  4EB9 0000126E             82      JSR     ASCIIDEC2BIN
0000108C  4EB9 0000109C             83      JSR     VERF1
00001092                            84      
00001092  7036                      85      MOVE.L  #$36, D0
00001094  4EB9 0000109C             86      JSR VERF1
0000109A                            87       
0000109A  4E75                      88      RTS 
0000109C                            89      
0000109C                            90  VERF1   
0000109C                            91      IF.B D1 <GE> #$00 AND.L D1 <LE> #$09 THEN.L
000010AE                            92  
000010AE                            93      ELSE
000010B2  7000                      94          MOVE.L  #$00, D0
000010B4                            95      ENDI 
000010B4  4E75                      96      RTS
000010B6                            97  
000010B6                            98  
000010B6                            99  *-------------------------------------------------------------
000010B6                           100  * TEST SUBROUTINES
000010B6                           101  * ASCII HEX TO BINARY
000010B6                           102  
000010B6                           103  H2BTEST
000010B6  103C 0063                104      MOVE.B #$63, D0
000010BA  4EB9 0000127A            105      JSR ASCIIHEX2BIN
000010C0  4EB9 00001138            106      JSR VERF2
000010C6                           107      
000010C6  103C 0041                108      MOVE.B #$41, D0
000010CA  4EB9 0000127A            109      JSR ASCIIHEX2BIN
000010D0  4EB9 00001138            110      JSR VERF2
000010D6                           111      
000010D6  103C 0046                112      MOVE.B #$46, D0
000010DA  4EB9 0000127A            113      JSR ASCIIHEX2BIN
000010E0  4EB9 00001138            114      JSR VERF2
000010E6                           115      
000010E6  103C 0044                116      MOVE.B #$44, D0
000010EA  4EB9 0000127A            117      JSR ASCIIHEX2BIN
000010F0  4EB9 00001138            118      JSR VERF2
000010F6                           119      
000010F6  103C 0060                120      MOVE.B #$60, D0
000010FA  4EB9 0000127A            121      JSR ASCIIHEX2BIN
00001100  4EB9 00001138            122      JSR VERF2
00001106                           123      
00001106  103C 0061                124      MOVE.B #$61, D0
0000110A  4EB9 0000127A            125      JSR ASCIIHEX2BIN
00001110  4EB9 00001138            126      JSR VERF2
00001116                           127      
00001116  103C 0066                128      MOVE.B #$66, D0
0000111A  4EB9 0000127A            129      JSR ASCIIHEX2BIN
00001120  4EB9 00001138            130      JSR VERF2
00001126                           131      
00001126  103C 0065                132      MOVE.B #$65, D0
0000112A  4EB9 0000127A            133      JSR ASCIIHEX2BIN
00001130  4EB9 00001138            134      JSR VERF2
00001136                           135      
00001136  4E75                     136      RTS
00001138                           137      
00001138                           138  VERF2   
00001138                           139      IF.L D1 <GE> #$00 AND.L D1 <LE> #$0F THEN.L
0000114C                           140      
0000114C                           141      ELSE
00001150  7000                     142          MOVE.L  #$00, D0
00001152  4E75                     143          RTS
00001154                           144      ENDI 
00001154                           145  
00001154  7001                     146      MOVE.L  #$01, D0
00001156                           147      
00001156  4E75                     148      RTS
00001158                           149  
00001158                           150  *-------------------------------------------------------------
00001158                           151  * TEST SUBROUTINES
00001158                           152  * ASCII STRING TO ASCII HEX
00001158                           153  
00001158                           154  HEX2ASCIITEST
00001158                           155  
00001158  2F01                     156      MOVE.L  D1, -(SP)
0000115A  2F02                     157      MOVE.L  D2, -(SP)
0000115C  2F04                     158      MOVE.L  D4, -(SP)
0000115E                           159  
0000115E  7000                     160      MOVE.L #$0000, D0
00001160  4EB9 000011DE            161      JSR HEX2ASCII
00001166  243C 30303030            162      MOVE.L #$30303030, D2
0000116C  4EB9 000011CE            163      JSR VERF3
00001172                           164      
00001172  203C 00001234            165      MOVE.L #$1234, D0
00001178  4EB9 000011DE            166      JSR HEX2ASCII
0000117E  243C 31323334            167      MOVE.L #$31323334, D2
00001184  4EB9 000011CE            168      JSR VERF3
0000118A                           169      
0000118A  203C 0000ABCD            170      MOVE.L #$ABCD, D0
00001190  4EB9 000011DE            171      JSR HEX2ASCII
00001196  243C 41424344            172      MOVE.L #$41424344, D2
0000119C  4EB9 000011CE            173      JSR VERF3
000011A2                           174      
000011A2  203C 0000FFFF            175      MOVE.L #$FFFF, D0
000011A8  4EB9 000011DE            176      JSR HEX2ASCII
000011AE  243C 46464646            177      MOVE.L #$46464646, D2
000011B4  4EB9 000011CE            178      JSR VERF3
000011BA                           179      
000011BA                           180      IF.L D4 <EQ> #$01 THEN.L
000011C4  7000                     181          MOVE.L #$00, D0
000011C6                           182      ENDI
000011C6                           183      
000011C6  281F                     184      MOVE.L  (SP)+, D4
000011C8  241F                     185      MOVE.L  (SP)+, D2
000011CA  221F                     186      MOVE.L  (SP)+, D1
000011CC                           187      
000011CC  4E75                     188      RTS
000011CE                           189      
000011CE                           190      
000011CE                           191  VERF3   
000011CE                           192      IF.L D1 <EQ> D2 THEN.L
000011D4  7001                     193          MOVE.L  #$01, D0
000011D6                           194      ELSE
000011DA  7801                     195          MOVE.L  #$01, D4
000011DC                           196      ENDI 
000011DC                           197      
000011DC  4E75                     198      RTS
000011DE                           199  
000011DE                           200  
000011DE                           201  *-------------------------------------------------------------
000011DE                           202  * HEX 2 STRING
000011DE                           203  * MOVES IN CHAR FROM D0
000011DE                           204  * MASKS AND SHIFTS IT, THEN DEPENDING ON CHAR
000011DE                           205  * CONVERTS IT TO ASCII CODE IN HEX
000011DE                           206  * THEN MOVES IT INTO D3 AND SHIFTS
000011DE                           207  
000011DE                           208  HEX2ASCII
000011DE  2F00                     209      MOVE.L  D0, -(SP)
000011E0  2F02                     210      MOVE.L  D2, -(SP)
000011E2  2F03                     211      MOVE.L  D3, -(SP)
000011E4                           212      
000011E4                           213  
000011E4  2200                     214      MOVE.L  D0, D1      ; MOVE INTO BUFFER
000011E6  C27C F000                215      AND     #$F000, D1  ; MASK DESIRED CHAR
000011EA  163C 000C                216      MOVE.B  #$0C, D3    ; SHIFT TO LSB 
000011EE  E669                     217      LSR     D3, D1      ;
000011F0  4EB9 0000123A            218      JSR     CONVERT     ; CONVERT STRING TO ASCII HEX & STORE IN D2
000011F6  163C 0008                219      MOVE.B  #$08, D3    ; SHIFT D2
000011FA  E7AA                     220      LSL.L   D3, D2      ;
000011FC                           221      
000011FC  2200                     222      MOVE.L  D0, D1
000011FE  C27C 0F00                223      AND     #$0F00, D1
00001202  E049                     224      LSR     #8, D1
00001204  4EB9 0000123A            225      JSR     CONVERT
0000120A  163C 0008                226      MOVE.B  #$08, D3
0000120E  E7AA                     227      LSL.L   D3, D2
00001210                           228      
00001210  2200                     229      MOVE.L  D0, D1
00001212  C27C 00F0                230      AND     #$00F0, D1
00001216  E849                     231      LSR     #4, D1
00001218  4EB9 0000123A            232      JSR     CONVERT
0000121E  163C 0008                233      MOVE.B  #$08, D3
00001222  E7AA                     234      LSL.L   D3, D2
00001224                           235      
00001224  2200                     236      MOVE.L  D0, D1
00001226  C27C 000F                237      AND     #$000F, D1
0000122A  4EB9 0000123A            238      JSR     CONVERT
00001230                           239      
00001230  2202                     240      MOVE.L D2, D1
00001232                           241      
00001232  261F                     242      MOVE.L  (SP)+, D3
00001234  241F                     243      MOVE.L  (SP)+, D2
00001236  201F                     244      MOVE.L  (SP)+, D0
00001238                           245      
00001238  4E75                     246      RTS
0000123A                           247      
0000123A                           248  CONVERT
0000123A                           249      IF.B D1 <GE> #$00 AND.L D1 <LE> #$09 THEN.L
0000124C  827C 0030                250          OR  #$30, D1
00001250                           251      ENDI
00001250                           252    
00001250                           253      IF.B D1 <GE> #$0A AND.L D1 <LE> #$0F THEN.L
00001262  0441 0009                254          SUB #$09, D1 ; CONVERT LETTER TO DIGIT BY SUBTRACTING 9
00001266  827C 0040                255          OR  #$40, D1 
0000126A                           256      ENDI
0000126A                           257      
0000126A  1401                     258      MOVE.B D1, D2
0000126C                           259      
0000126C  4E75                     260      RTS
0000126E                           261  
0000126E                           262  *-------------------------------------------------------------
0000126E                           263  * CONVERT ASCII DECIMAL DIGIT TO HEX VALUE 
0000126E                           264  * TAKES VALUE FROM D0 AND PUTS IT IN
0000126E                           265  * HEX FORM IN D1
0000126E                           266  * EX: '9' --> 9(16)
0000126E                           267  
0000126E                           268  ASCIIDEC2BIN
0000126E                           269  
0000126E  2F00                     270      MOVE.L  D0, -(SP)
00001270                           271      
00001270  1200                     272      MOVE.B  D0, D1    
00001272  0441 0030                273      SUB     #$30, D1 ;SUBTRACT 30 FROM OPERAND TO GET DIGIT
00001276                           274          
00001276  201F                     275      MOVE.L  (SP)+, D0  
00001278  4E75                     276      RTS
0000127A                           277      
0000127A                           278  *-------------------------------------------------------------
0000127A                           279  * CONVERT ASCII HEX DIGIT TO HEX VALUE 
0000127A                           280  * TAKES VALUE FROM D0 AND PUTS IT IN
0000127A                           281  * HEX FORM IN D1
0000127A                           282  * EX: 'A' --> A(16)
0000127A                           283  
0000127A                           284  ASCIIHEX2BIN
0000127A                           285  
0000127A  2F00                     286      MOVE.L  D0, -(SP)
0000127C  1200                     287      MOVE.B  D0, D1
0000127E                           288      IF.L D1 <GE> #$61 AND.L D1 <LE> #$66 THEN.L
00001292  0441 0057                289          SUB #$57, D1 
00001296                           290          
00001296                           291      ELSE    
0000129A                           292          IF.B D0 <GT> #$39 THEN.L
000012A2  5F41                     293              SUBI #$7, D1        ;SUBTRACTING 7 TO CONCANTENATE ALL
000012A4                           294          ENDI    
000012A4  0441 0030                295      SUB #$30, D1                    ;ASCII VALUES FROM 30-3F
000012A8                           296      ENDI        
000012A8                           297  
000012A8  201F                     298      MOVE.L  (SP)+, D0
000012AA  4E75                     299      RTS
000012AC                           300  
000012AC                           301  *-------------------------------------------------------------
000012AC                           302  * GCHAR gets an input character and stores is in D0
000012AC                           303  
000012AC                           304  GCHAR   IF.B    SIM <EQ> #00 THEN.L
000012B6                           305          
000012B6                           306      *INSERT YOUR HARDWARE GETCHAR CODE
000012B6                           307  
000012B6                           308      ELSE
000012BA                           309      
000012BA  2F01                     310      MOVE.L  D1, -(SP)   ;
000012BC  7005                     311      MOVE.L  #05, D0     ;
000012BE  4E4F                     312      TRAP    #15         ;
000012C0  1001                     313      MOVE.B  D1, D0      ;
000012C2  221F                     314      MOVE.L  (SP)+, D1   ;
000012C4                           315      
000012C4                           316      ENDI
000012C4                           317  
000012C4                           318  *-------------------------------------------------------------
000012C4                           319  
000012C4                           320  * PCHAR outputs the character on D0 
000012C4                           321  PCHAR   IF.B    SIM <EQ> #00 THEN.L
000012CE                           322      
000012CE                           323      *INSERT YOUR HARDWARE PUTCHAR CODE
000012CE                           324      
000012CE                           325      ELSE
000012D2                           326      
000012D2  2F00                     327      MOVE.L  D0, -(SP)   ; Task
000012D4  2F01                     328      MOVE.L  D1, -(SP)   ; Char to display
000012D6  1200                     329      MOVE.B  D0, D1      ;
000012D8  7006                     330      MOVE.L  #06, D0     ;
000012DA  4E4F                     331      TRAP    #15     ;
000012DC  221F                     332      MOVE.L  (SP)+, D1   ;
000012DE  201F                     333      MOVE.L  (SP)+, D0   ;
000012E0                           334      
000012E0                           335      ENDI
000012E0                           336      
000012E0  4E75                     337      RTS
000012E2                           338  
000012E2                           339  
000012E2                           340      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCIIDEC2BIN        126E
ASCIIHEX2BIN        127A
CONVERT             123A
D2BTEST             1032
ERRTEXT             1020
GCHAR               12AC
H2BTEST             10B6
HEX2ASCII           11DE
HEX2ASCIITEST       1158
OUTSTR              0
PCHAR               12C4
SIM                 1
START               1000
SUCCESSTXT          1028
VERF1               109C
VERF2               1138
VERF3               11CE
_00000000           1014
_00000001           10B2
_00000002           10B4
_00000003           1150
_00000004           1154
_00000005           11C6
_00000006           11DA
_00000007           11DC
_00000008           1250
_00000009           126A
_0000000A           129A
_0000000B           12A8
_0000000C           12A4
_0000000D           12BA
_0000000E           12C4
_0000000F           12D2
_00000010           12E0
